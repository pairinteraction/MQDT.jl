name: Testing

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  run-tests:
    name: Run tests (Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
          - 'lts'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64

    steps:
      - uses: actions/checkout@v5

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1

      - uses: julia-actions/julia-runtest@v1


  run-examples:
    name: Run examples (Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
          - 'lts'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64

    steps:
      - uses: actions/checkout@v5

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1

      - name: Instantiate examples environment
        working-directory: examples/
        run: julia --project=. -e 'import Pkg; Pkg.develop(path=".."); Pkg.instantiate()'

      - name: Run all examples
        working-directory: examples/
        run: |
          for f in *.jl; do
            julia --project=. "$f"
          done
